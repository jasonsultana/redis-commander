@inject ICommandRepository CommandRepository
@inject AppState AppState
@using System.Text.RegularExpressions
@using System.Linq;
@using System.Dynamic;

@if (CommandId.HasValue)
{
    <h3>Edit Command</h3>
}
else
{
    <h3>New Command</h3>
}

<section>
    <EditForm Model="Command" OnValidSubmit="HandleValidSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
        @if (CommandId.HasValue)
        {
            <div class="form-group row">
                <div class="col-12">
                    <label class="form-label">
                        Command: @CommandId
                    </label>
                </div>
            </div>
        }

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Command.Name)</label>
                <InputText class="form-control" @bind-Value="Command.Name"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Command.Description)</label>
                <InputText class="form-control" @bind-Value="Command.Description"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Command.Key)</label>
                <InputText class="form-control" @bind-Value="Command.Key"></InputText>
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Command.Key))
        {
            var @params = GetCommandParams();

            foreach (var param in @params)
            {
                <div class="form-group row">
                    <label class="form-label col-4">@param</label>
                    <div class="col-8">
                        <!--
                            Since the dynamic properties aren't known at compile-time, we can't bind to them. Use a plain old HTML
                            input field and simply server-side handle the change event.
                        -->
                        <input type="text" class="form-control" @onchange="@((e) => { HandleCommandParamChanged(param, e?.Value?.ToString()); })"/>
                    </div>
                </div>
            }
        }

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-success" @onclick="HandleRunClickAsync">Run</button>
    </EditForm>
</section>

@code {
    public int? CommandId
    {
        get => AppState.CommandState.CommandId;
        set => AppState.CommandState.CommandId = value;
    }

    public Command Command { get; set; } = new Command();

    // Store the dynamic params inside this dictionary for execution later
    private Dictionary<string, string> CommandParams = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadCommandAsync();

        // Whenever the state is changed by the parent component, call StateHasChanged to reload the child (this)
        AppState.CommandState.OnChange += async () =>
        {
            await ReloadCommandAsync();

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }

    private async Task ReloadCommandAsync()
    {
        AppState.Alert.Hide();

        if (CommandId.HasValue)
        {
            Command = await CommandRepository.GetAsync(CommandId.Value);
        }
        else
        {
            Command = new Command();
        }
    }

    private string[] GetCommandParams()
    {
        if (string.IsNullOrWhiteSpace(Command.Key))
            return Array.Empty<string>();

        // find all occurences of {someValue}
        var pattern = new Regex("\\{(.*?)\\}", RegexOptions.Compiled);
        var matches = pattern.Matches(Command.Key);

        return matches.Select(m => m.Value.Replace("{", "").Replace("}", "")).ToArray();
    }

    public void HandleCommandParamChanged(string param, string value)
    {
        CommandParams[param] = value;
    }

    public Task HandleRunClickAsync()
    {
        return Task.CompletedTask;
    }

    public async Task HandleValidSubmitAsync()
    {
        if (CommandId.HasValue)
        {
            await CommandRepository.UpdateAsync(Command);
        }
        else
        {
            var newId = await CommandRepository.AddAsync(Command);

            Command.Id = newId;
            CommandId = newId;
        }

        AppState.Alert.ShowSuccess("Command saved successfully.");
    }

    public void HandleInvalidSubmit()
    {
        AppState.Alert.ShowDanger("There are some errors on the form.");
    }
}

