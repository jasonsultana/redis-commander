@inject IConnectionRepository ConnectionRepository
@inject ConnectionState AppState;

@if (ConnectionId.HasValue)
{
    <h3>Edit Connection</h3>
}
else
{
    <h3>New Connection</h3>
}

<section>
    <EditForm Model="Connection" OnValidSubmit="HandleValidSubmitAsync" OnInvalidSubmit="HandleInvalidSubmitAsync">
        @if (Alert != null)
        {
            <div class="alert @Alert.StatusClass">@Alert.StatusMessage</div>
        }

        @if (ConnectionId.HasValue)
        {
            <div class="form-group row">
                <div class="col-12">
                    <label class="form-label">
                        Connection: @ConnectionId
                    </label>
                </div>
            </div>
        }

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Connection.Name)</label>
                <InputText class="form-control" @bind-Value="Connection.Name"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Connection.HostUrl)</label>
                <InputText class="form-control" @bind-Value="Connection.HostUrl"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Connection.Port)</label>
                <InputNumber class="form-control" @bind-Value="Connection.Port"></InputNumber>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Connection.User)</label>
                <InputText class="form-control" @bind-Value="Connection.User"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <label class="form-label">@nameof(Connection.Pass)</label>
                <input class="form-control" type="password" @bind="Connection.Pass" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-12">
                <InputCheckbox @bind-Value="Connection.UseSSL"></InputCheckbox>
                &nbsp;@nameof(Connection.UseSSL)
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</section>

@code {
    public int? ConnectionId
    {
        get => AppState.ConnectionId;
        set => AppState.ConnectionId = value;
    }

    public Alert Alert = null;

    public Connection Connection { get; set; } = new Connection()
    {
        Port = 6379
    };

    protected override async Task OnInitializedAsync()
    {
        await ReloadConnectionAsync();

        // Whenever the state is changed by the parent component, call StateHasChanged to reload the child (this)
        AppState.OnChange += async () =>
        {
            await ReloadConnectionAsync();
            StateHasChanged();
        };

        await base.OnInitializedAsync();
    }

    public async Task HandleValidSubmitAsync()
    {
        if (ConnectionId.HasValue)
        {
            await ConnectionRepository.UpdateAsync(Connection);
        }
        else
        {
            var newId = await ConnectionRepository.AddAsync(Connection);

            Connection.Id = newId;
            ConnectionId = newId;
        }

        this.Alert = Alert.Success("Connection saved successfully.");
    }

    public async Task HandleInvalidSubmitAsync()
    {
        this.Alert = Alert.Danger("There are some errors on the form.");
    }

    private async Task ReloadConnectionAsync()
    {
        this.Alert = null;

        if (ConnectionId.HasValue)
        {
            Connection = await ConnectionRepository.GetAsync(ConnectionId.Value);
        }
    }
}